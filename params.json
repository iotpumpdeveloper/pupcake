{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Pupcake, a PHP 5.3+ application framework","name":"Pupcake","google":"","body":"Pupcake --- a micro framework for PHP 5.3+\r\n=======================================\r\n\r\n##About Pupcake Framework\r\n+ Pupcake is a minimal but extensible microframework for PHP 5.3+\r\n+ Pupcake can be run in traditional web server such as Apache.\r\n+ Pupcake can be run in command line with event based functionalities like Node.js by using the Node plugin together withg php-uv and php-httpparser extensions\r\n+ For more detail usages on using pupcake in general and on traditional web servers, please see https://github.com/superjimpupcake/Pupcake/wiki/_pages\r\n+ To see what pupcake can do like Node.js, check out this README page, the Node plugin is under actively development and will provide more features down the road\r\n\r\n##Installation:\r\n\r\n###If you plan to use it on Apache\r\n#### install package \"Pupcake/Pupcake\" using composer (http://getcomposer.org/)\r\n####.htaccess File for Apache\r\n    RewriteEngine On\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteRule ^(.*)$ index.php/$1 [L]\r\n\r\n###If you plan to use it like Node.js\r\n#### install package \"Pupcake/Pupcake\" using composer (http://getcomposer.org/)\r\n#### install sockets extension (http://www.php.net/manual/en/sockets.installation.php)\r\n#### install pcntl extension for php (http://www.php.net/manual/en/book.pcntl.php)\r\n#### enable openssl support  for php (http://www.php.net/manual/en/openssl.installation.php)\r\n#### install php-uv and php-httpparser\r\n    git clone https://github.com/chobie/php-uv.git --recursive\r\n    cd php-uv/libuv\r\n    make && cp uv.a libuv.a (my experience on both centos 64bit and ubuntu 64bit server is, we need to add -fPIC flag in config.m4)\r\n    cd ..\r\n    phpize\r\n    ./configure\r\n    make && make install (my experience on both centos64bit and ubuntu64bit  server is, we need to add -fPIC flag in config.m4)\r\n\r\n    git clone https://github.com/chobie/php-httpparser.git --recursive\r\n    cd php-httpparser\r\n    phpize\r\n    ./configure\r\n    make && make install\r\n\r\n    add following extensions to your php.ini\r\n    extension=uv.so\r\n    extension=httpparser.so\r\n\r\n\r\n###Simple requests when running on Apache\r\n#### For more details on running Pupcake in general and in traditional web server, please see https://github.com/superjimpupcake/Pupcake/wiki/_pages\r\n```php\r\n<?php\r\n//Assuming this is public/index.php and the composer vendor directory is ../vendor\r\n\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Pupcake\\Pupcake();\r\n\r\n$app->get(\"date/:year/:month/:day\", function($req, $res){\r\n    $output = $req->params('year').'-'.$req->params('month').'-'.$req->params('day');\r\n    $res->send($output);\r\n});\r\n\r\n$app->get(\"/hello/:name\", function($req, $res){\r\n  $res->send(\"hello \".$req->params('name').\" in get\");\r\n});\r\n\r\n$app->post(\"/hello/:name\", function($req, $res){\r\n  $res->send(\"hello \".$req->params('name').\" in post\");\r\n});\r\n\r\n$app->put(\"/hello/:name\", function($req, $res){\r\n  $res->send(\"hello \".$req->params('name').\" in put\");\r\n});\r\n\r\n$app->delete(\"/hello/:name\", function($req, $res){\r\n  $res->send(\"hello \".$req->params('name').\" in delete\");\r\n});\r\n\r\n/**\r\n * Multiple request methods for one route\r\n */\r\n$app->map(\"/api/hello/:action\", function($req, $res){\r\n  $res->send(\"hello \".$req->params('action').\" in get and post\");\r\n})->via('GET','POST');\r\n\r\n\r\n$app->run();\r\n```\r\n\r\n### Using the node plugin: console.log\r\n```php\r\n<?php\r\n//Assuming this is server/server.php and the composer vendor directory is ../vendor\r\n\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Pupcake\\Pupcake();\r\n$node = $app->usePlugin(\"Pupcake.Plugin.Node\"); //here we import the node plugin\r\n$console = $node->import(\"console\");\r\n$console->log(\"hello\");\r\n```\r\nTo run the code above, type php server/server.php\r\nIn the code above, we simply use the node plugin and then import the console module to output \"hello\" to the console.\r\n\r\n### Using the node plugin: process.nextTick\r\nIn the script below, we define a dynamic method named \"hello\" in a Node plugin instance, then we use the process module to keep calling the hello method in every single \"tick\" \r\nin an async fashion.\r\n```php\r\n<?php\r\n//Assuming this is public/index.php and the composer vendor directory is ../vendor\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Pupcake\\Pupcake();\r\n$node = $app->usePlugin(\"Pupcake.Plugin.Node\");\r\n$node->method(\"hello\", function() use ($node){\r\n  $console = $node->import(\"console\"); //use the console module\r\n  $console->log(\"doing some tasks\");\r\n  $process = $node->import(\"process\"); //use the process module\r\n  $process->nextTick(function() use ($node){\r\n    $node->hello(); \r\n  });\r\n});\r\n\r\n$node->hello();\r\n```\r\n\r\n### Using the node plugin: http.createServer, benchmarked with Node.js v0.8.8, our php server is faster than node.js and can handle high number of concurrent requests\r\nIn the example below, we mimic the node.js's http server creation process and send \"Hello World\" to the browser\r\n```php\r\n<?php\r\n//Assuming this is server/server.php and the composer vendor directory is ../vendor\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Pupcake\\Pupcake();\r\n$node = $app->usePlugin(\"Pupcake.Plugin.Node\");\r\n\r\n$console = $node->import(\"console\");\r\n$http = $node->import(\"http\");\r\n\r\n$http->createServer(function($req, $res) {\r\n  $res->writeHead(200, array('Content-Type' => 'text/plain'));\r\n  $res->end(\"Hello World\\n\");\r\n})->listen(1337, '127.0.0.1');\r\n$console->log('Server running at http://127.0.0.1:1337/');\r\n```\r\nSimply run php server/server.php and you can see the result from http://127.0.0.1:1337/\r\n\r\nBelow is the benchmark comparison with Node.js\r\n\r\nBenchmarking compared with the following node.js script\r\n```javascript\r\nvar http = require('http');\r\nhttp.createServer(function (req, res) {\r\n    res.writeHead(200, {'Content-Type': 'text/plain'});\r\n    res.end('Hello World\\n');\r\n    }).listen(1337, '127.0.0.1');\r\nconsole.log('Server running at http://127.0.0.1:1337/');\r\n```\r\n\r\nBelow are the data return by apache ab, apache ab is set with n=100000 and c=2000\r\n\r\nOur php \"hello world\" script above\r\n\r\n    Concurrency Level:      2000\r\n    Time taken for tests:   17.058 seconds\r\n    Complete requests:      100000\r\n    Failed requests:        0\r\n    Write errors:           0\r\n    Total transferred:      5730381 bytes\r\n    HTML transferred:       1206396 bytes\r\n    Requests per second:    5862.34 [#/sec] (mean)\r\n    Time per request:       341.161 [ms] (mean)\r\n    Time per request:       0.171 [ms] (mean, across all concurrent requests)\r\n    Transfer rate:          328.06 [Kbytes/sec] received\r\n\r\nThe Node.js \"hello world\" script above\r\n\r\n    Concurrency Level:      2000\r\n    Time taken for tests:   23.661 seconds\r\n    Complete requests:      100000\r\n    Failed requests:        0\r\n    Write errors:           0\r\n    Total transferred:      11300000 bytes\r\n    HTML transferred:       1200000 bytes\r\n    Requests per second:    4226.29 [#/sec] (mean)\r\n    Time per request:       473.228 [ms] (mean)\r\n    Time per request:       0.237 [ms] (mean, across all concurrent requests)\r\n    Transfer rate:          466.38 [Kbytes/sec] received\r\n\r\n### Using the node plugin: http.createServer and multiple servers on different ports\r\nIn the example below, we created 3 different server instances to server port 1337, 9000 and 9001, all in one single event loop\r\n```php\r\n<?php\r\n//Assuming this is server/server.php and the composer vendor directory is ../vendor\r\nrequire_once __DIR__.'/../vendor/autoload.php';\r\n\r\n$app = new Pupcake\\Pupcake();\r\n$node = $app->usePlugin(\"Pupcake.Plugin.Node\");\r\n\r\n$console = $node->import(\"console\");\r\n$http = $node->import(\"http\");\r\n\r\n$http->createServer(function($req, $res) use ($node){\r\n  $res->writeHead(200, array('Content-Type' => 'text/plain'));\r\n  $res->end(\"Hello World On Port 1337\\n\");\r\n})->listen(1337, '127.0.0.1');\r\n$console->log('Server running at http://127.0.0.1:1337/');\r\n\r\n$http->createServer(function($req, $res) {\r\n  $res->writeHead(200, array('Content-Type' => 'text/plain'));\r\n  $res->end(\"Hello World On Port 9000\\n\");\r\n})->listen(9000, '127.0.0.1');\r\n$console->log('Server running at http://127.0.0.1:9000/');\r\n\r\n$http->createServer(function($req, $res) {\r\n  $res->writeHead(200, array('Content-Type' => 'text/plain'));\r\n  $res->end(\"Hello World On Port 9001\\n\");\r\n})->listen(9001, '127.0.0.1');\r\n$console->log('Server running at http://127.0.0.1:9001/');\r\n```\r\n"}